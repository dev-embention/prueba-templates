name: Project automations
on:
  issues:
    types:
      - opened
      - reopened
      - closed
  issue_comment:
    types: created
  schedule:
    - cron: '20 15 * * *'

# map fields with customized labels
env:
  todo: Todo
  done: Done
  in_progress: In Progress
  ans: Answered
  not_ans: Not Answered
  organization: dev-embention
  project: 2
  REPO_TITLE: ${{ github.repository }}
  ISSUE_TITLE: ${{ github.event.issue.title }}
  
jobs:
  issue_opened_or_reopened:
    name: issue_opened_or_reopened
    runs-on: ubuntu-latest
    if: github.event_name == 'issues' && (github.event.action == 'opened' || github.event.action == 'reopened')
    steps:
      - name: Move issue to ${{ env.todo }} # New issues
        uses: leonsteinhaeuser/project-beta-automations@v2.2.1
        env:
          DEBUG_COMMANDS: true
          DEBUG_LOG: true
        with:
          gh_token: ${{ secrets.GH_TOKEN_MOVE_ISSUES }}
          #user: sample-user
          organization: ${{ env.organization }}
          project_id: ${{ env.project }}
          resource_node_id: ${{ github.event.issue.node_id }}
          status_value: ${{ env.todo }} # Target status
  issue_done:
    name: issue_done
    runs-on: ubuntu-latest
    steps:
      - uses: octokit/graphql-action@v2.2.25
        id: get_status
        with:
          query: |
            query {
              search(query: "repo:${{ github.repository }} is:issue in:title \"${{ github.event.issue.title }}", type: ISSUE, first: 1) {
                nodes {
                  ... on Issue {
                    id
                  }
                }
              }
            }
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN_MOVE_ISSUES }}
      - name: Get Issue Status in Project
        uses: octokit/graphql-action@v2.x
        id: get_issue_status
        with:
          query: |
            query {
              node(id: "${{ steps.search_issue.outputs.data.search.nodes[0].id }}") {
                ... on Issue {
                  projectCards {
                    nodes {
                      project {
                        id
                      }
                    }
                  }
                }
              }
            }
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN_MOVE_ISSUES }}
      - name: Get Project Column
        uses: octokit/graphql-action@v2.x
        id: get_project_column
        with:
          query: |
            query {
              node(id: "${{ steps.get_issue_status.outputs.data.node.projectCards.nodes[0].project.id }}") {
                ... on Project {
                  columns(first: 10) {
                    nodes {
                      name
                      cards(first: 100) {
                        nodes {
                          content {
                            ... on Issue {
                              id
                              state
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN_MOVE_ISSUES }}
      - run: "echo 'latest release: ${{ steps.get_status.outputs.data }}'"
      - name: Moved issue to ${{ env.done }}
        uses: leonsteinhaeuser/project-beta-automations@v2.2.1
        with:
          gh_token: ${{ secrets.GH_TOKEN_MOVE_ISSUES }}
          # user: sample-user
          organization: ${{ env.organization }}
          project_id: ${{ env.project }}
          resource_node_id: ${{ github.event.issue.node_id }}
          status_value: ${{ env.done }} # Target status
  issue_inprogress:
    name: issue_inprogress
    runs-on: ubuntu-latest
    steps:
      - name: Check member
        id: checkUser
        if: github.event_name == 'issue_comment'
        uses: actions-cool/check-user-permission@v2
        with:
          require: 'write'
      - name: Moved issue to ${{ env.ans }}
        uses: leonsteinhaeuser/project-beta-automations@v2.2.1
        if: steps.checkUser.outputs.user-permission == 'write' || steps.checkUser.outputs.user-permission == 'admin'
        with:
          gh_token: ${{ secrets.GH_TOKEN_MOVE_ISSUES }}
          # user: sample-user
          organization: ${{ env.organization }}
          project_id: ${{ env.project }}
          resource_node_id: ${{ github.event.issue.node_id }}
          status_value: ${{ env.ans }} # Target status
      - name: Moved issue to ${{ env.not_ans }}
        uses: leonsteinhaeuser/project-beta-automations@v2.2.1
        if: steps.checkUser.outputs.user-permission == 'read'
        with:
          gh_token: ${{ secrets.GH_TOKEN_MOVE_ISSUES }}
          # user: sample-user
          organization: ${{ env.organization }}
          project_id: ${{ env.project }}
          resource_node_id: ${{ github.event.issue.node_id }}
          status_value: ${{ env.not_ans }} # Target status
