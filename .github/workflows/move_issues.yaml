name: Project automations
on:
  issues:
    types:
      - opened
      - reopened
      - closed
  issue_comment:
    types: created

# map fields with customized labels
env:
  todo: Todo
  done: Done
  in_progress: In Progress
  ans: Answered
  not_ans: Not Answered
  organization: dev-embention
  project: 2

jobs:
  issue_opened_or_reopened:
    name: issue_opened_or_reopened
    runs-on: ubuntu-latest
    if: github.event_name == 'issues' && (github.event.action == 'opened' || github.event.action == 'reopened')
    steps:
      - name: Move issue to ${{ env.todo }} # New issues
        uses: leonsteinhaeuser/project-beta-automations@v2.2.1
        env:
          DEBUG_COMMANDS: true
          DEBUG_LOG: true
        with:
          gh_token: ${{ secrets.GH_TOKEN_MOVE_ISSUES }}
          #user: sample-user
          organization: ${{ env.organization }}
          project_id: ${{ env.project }}
          resource_node_id: ${{ github.event.issue.node_id }}
          status_value: ${{ env.todo }} # Target status
  issue_closed:
    name: issue_done
    runs-on: ubuntu-latest
    steps:
      - name: Get status column
        run: |
          QUERY='query {
            organization(login: "${{ env.organization }}") {
              projectV2(number: ${{ env.project }}) {
                columns(first: 20) {
                  nodes {
                    id
                    name
                    cards {
                      nodes {
                        content {
                          ... on Issue {
                            title
                            state
                            labels(first: 5) {
                              nodes {
                                name
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }' > project_data.json

          curl -X POST \
            -H "Authorization: bearer GH_TOKEN_MOVE_ISSUES" \
            -d "{\"query\": \"$QUERY\"}" \
            https://api.github.com/graphql

          echo 'PROJECT_ID='$(jq '.data.organization.projectV2.id' project_data.json) >> $GITHUB_ENV

          # Extract option ID for specified column name
          OPTION_ID=$(jq -r '.data.organization.projectV2.fields.nodes[]
                         | select(.name == "Status")
                         | .options[]
                         | select(.name == env.COLUMN_NAME)
                         | .id' project_data.json)
          
          # Extract status corresponding to the option ID
          STATUS=$(jq -r --arg OPTION_ID "$OPTION_ID" '.data.organization.projectV2.fields.nodes[]
                         | select(.name == "Status")
                         | .options[]
                         | select(.id == $OPTION_ID)
                         | .name' project_data.json)
          
          # Set status as environment variable
          echo "STATUS=$STATUS" >> $GITHUB_ENV
  issue_inprogress:
    name: issue_inprogress
    runs-on: ubuntu-latest
    steps:
      - name: Check member
        id: checkUser
        if: github.event_name == 'issue_comment'
        uses: actions-cool/check-user-permission@v2
        with:
          require: 'write'
      - name: Moved issue to ${{ env.ans }}
        uses: leonsteinhaeuser/project-beta-automations@v2.2.1
        if: steps.checkUser.outputs.user-permission == 'write' || steps.checkUser.outputs.user-permission == 'admin'
        with:
          gh_token: ${{ secrets.GH_TOKEN_MOVE_ISSUES }}
          # user: sample-user
          organization: ${{ env.organization }}
          project_id: ${{ env.project }}
          resource_node_id: ${{ github.event.issue.node_id }}
          status_value: ${{ env.ans }} # Target status
      - name: Moved issue to ${{ env.not_ans }}
        uses: leonsteinhaeuser/project-beta-automations@v2.2.1
        if: steps.checkUser.outputs.user-permission == 'read'
        with:
          gh_token: ${{ secrets.GH_TOKEN_MOVE_ISSUES }}
          # user: sample-user
          organization: ${{ env.organization }}
          project_id: ${{ env.project }}
          resource_node_id: ${{ github.event.issue.node_id }}
          status_value: ${{ env.not_ans }} # Target status
